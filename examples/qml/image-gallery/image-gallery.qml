import QtQuick 2.0
import Enginio 1.0
import "qrc:///config.js" as AppConfig
import "qrc:///utils.js" as Utils

import QtQuick.Dialogs 1.0

/*
 * Enginio image gallery example.
 *
 * Main window contains list of enginioModel on the backend and button for uploading
 * new enginioModel. Image list contains image thumbnail (generated by Enginio
 * backend) and some image metadata. Clicking list items downloads image file
 * and displays it in dialog window. Clicking the red x deletes enginioModel from
 * backend.
 *
 * In the backend enginioModel are represented as objects of type "objects.image". These
 * objects contain a property "file" which is a reference to the actual binary file.
 */

Rectangle {
    width: 500
    height: 700

    // Enginio client specifies the backend to be used
    //! [client]
    Enginio {
        id: client
        backendId: AppConfig.backendData.id
        backendSecret: AppConfig.backendData.secret
        serviceUrl: AppConfig.backendData.serviceUrl
        onError: console.log("Enginio error " + reply.errorCode + ": " + reply.errorString)
    }
    //! [client]

    //! [model]
    EnginioModel {
        id: enginioModel
        enginio: client
        query: { // query for all objects of type "objects.image" and include references to files
            "objectType": "objects.image",
            "include": {"file": {}},
        }
    }
    //! [model]

    ListView {
        id: imageListView
        model: enginioModel // get the data from EnginioModel
        delegate: imageListDelegate
        anchors.top: parent.top
        anchors.bottom: uploadButton.top
        anchors.left: parent.left
        anchors.right: parent.right
    }

    // Delegate for displaying individual rows of the model
    Component {
        id: imageListDelegate

        Rectangle {
            height: 120
            width: parent.width
            color: index % 2 ? "#eeeeee" : "transparent"

            Item {
                id: thumbnailRect
                height: 100
                width: 100
                anchors.left: parent.left
                anchors.top: parent.top
                anchors.margins: 10
                Image {
                    id: image
                    anchors.fill: parent
                    smooth: true
                    fillMode: Image.PreserveAspectFit
                }
                AnimatedImage {
                    id: spinner
                    anchors.centerIn: parent
                    source: "qrc:icons/spinner.gif"
                    visible: image.status != Image.Ready
                }
                Component.onCompleted: {
                    var data = { "id": model.id,
                        "objectType": "objects.image",
                        "propertyName": "file" }
                    var reply = client.downloadFile(data)
                    reply.finished.connect(function() {
                        image.source = reply.data.expiringUrl
                    })
                }
            }

            Item {
                id: textRect
                height: 100
                anchors.left: thumbnailRect.right
                anchors.right: parent.right
                anchors.top: parent.top
                anchors.margins: 10

                Column {
                    Text {
                        height: 33
                        verticalAlignment: Text.AlignVCenter
                        font.pixelSize: height * 0.5
                        text: model.name ? model.name : ""
                    }
                    Text {
                        height: 33
                        verticalAlignment: Text.AlignVCenter
                        font.pixelSize: height * 0.5
                        text: Utils.sizeStringFromFile(model.file)
                    }
                    Text {
                        height: 33
                        verticalAlignment: Text.AlignVCenter
                        font.pixelSize: height * 0.5
                        text: Utils.timeStringFromFile(model.file)
                    }
                }
            }

            // Clicking list item opens full size image in separate dialog
            MouseArea {
                id: hitbox
                anchors.fill: parent
                hoverEnabled: true
                onClicked: {
                    imageDialog.title = model.name ? model.name : "";
                    imageDialog.source = AppConfig.backendData.serviceUrl + model.file.url;
                    imageDialog.visible = true;
                }
                onContainsMouseChanged: deleteIcon.opacity = containsMouse ? 1.0 : 0.0
            }

            // Delete button
            Image {
                id: deleteIcon
                width: 32
                height: 32
                anchors.right: parent.right
                anchors.top: parent.top
                anchors.margins: 10
                opacity: 0.0
                source: "qrc:icons/delete_icon.png"
                Behavior on opacity { NumberAnimation { duration: 200 } }
                MouseArea {
                    anchors.fill: parent
                    onClicked: enginioModel.remove(index)
                }
            }
        }
    }

    // Dialog for showing full size image
    ImageDialog {
        id: imageDialog
    }

    // Button that opens the file dialog
    EnginioButton {
        id: uploadButton
        width: parent.width
        height: 50
        anchors.bottom: parent.bottom
        text: "Upload"
        textPixelSize: 20
        onClicked: {
            fileDialog.visible = true;
        }
    }

    // File dialog for selecting image file from local file system
    FileDialog {
        id: fileDialog
        title: "Select image file to upload"
        nameFilters: [ "Image files (*.png *.jpg *.jpeg)", "All files (*)" ]

        onSelectionAccepted: {
            var pathParts = fileUrl.toString().split("/");
            var fileName = pathParts[pathParts.length - 1];
            var fileObject = {
                objectType: "objects.image",
                name: fileName,
                localPath: fileUrl
            }
            var reply = client.create(fileObject);
            reply.finished.connect(function() {
                var uploadData = {
                    file: { fileName: fileName },
                    targetFileProperty: {
                        objectType: "objects.image",
                        id: reply.data.id,
                        propertyName: "file"
                    },
                };
                console.log("data: " + reply.data + " id: " + reply.data.id)
                var uploadReply = client.uploadFile(uploadData, fileUrl)
                uploadReply.finished.connect(function() { var tmp = enginioModel.query; enginioModel.query = {}; enginioModel.query = tmp; })
            })
            console.log("File selected: " + fileUrl);
        }
    }
}
