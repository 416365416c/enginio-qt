/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of Enginio.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page index.html
\contentspage {Enginio Overview}{Contents}
\indexpage Enginio Overview
\startpage Enginio Overview
\nextpage Enginio Installation and Prerequisits

\title Enginio Overview

\brief Enginio is a Backend-as-a-Service solution to ease backend development for any connected and data-driven application.

Enginio works from both, C++ and Qt Quick.

To get started quickly follow the mini-tutorial:
\list
\li \l {Enginio Installation and Prerequisits}
\li \l {Getting Started with Enginio using Qt Quick}
\li \l {Getting Started with Enginio using C++}
\endlist

The reference documentation and examples:
\list
\li \l {All Enginio Classes}
\li \l {Enginio Examples}
\endlist
*/

/*!
\page enginio-getting-started
\indexpage Enginio Overview
\nextpage Getting Started with Enginio using Qt Quick
\previouspage Enginio Overview

\title Enginio Installation and Prerequisits

This guide shows how to use the Enginio Qt library in a Qt application
(both Qt C++ and QML cases are covered).
This guide can be also applied when integrating Enginio with existing Qt projects.

\note The Enginio Qt library is currently under heavy development and not yet production ready.

\section1 Prerequisites

You can use Enginio with an existing installation of Qt 5.1 or later or get Qt packages containing Engino (starting with Qt 5.2).


\list
  \li  Development environment (Linux, Windows or Mac OS X) and compiler toolchain.
  \li  Qt framework, 5.1 or newer (Qt 5.1.1 recommended)
  \li  OpenSSL to enable SSL support in Qt.
       Install the OpenSSL binaries into your system and Qt will automatically pick them up.

       \list
         \li Mac OS X: OpenSSL library should exist as preinstalled in system
         \li Linux: Most distributions have preinstalled OpenSSL library. If yours doesn't, install libssl via your distribution's package manager
         \li Windows: Install Win32 OpenSSL (light version is enough, copy DLLs to windows system directory when asked)
       \endlist

    \li Perl 5.10 or newer to enable Qt5 module compilation
    \list
        \li Mac OS X: Perl should exist as preinstalled in system
        \li Linux: Perl should exist as preinstalled in system
        \li Windows: Install some Perl distribution
    \endlist
\endlist

\section1 Install Enginio Qt library

\list
  \li  Download the latest library release from Enginio dashboard.

       Go to Enginio Dashboard ⇒ Open Dashboard left menu ⇒ Create backend
        ⇒ Give some meaningful name for backend ⇒ Create
        ⇒ See ’Libraries box’ in backend home view
        ⇒ Select ’Qt/QML’ library from drop-down ⇒ Click Download
  \li  Extract the zip package
  \li  Build and install Enginio as Qt5 module
  \endlist
      \code
            qmake
            make install // or nmake or mingw32-make
      \endcode
*/

/*!
\page enginio-qml
\indexpage Enginio Overview
\nextpage Getting Started with Enginio using C++
\previouspage Enginio Installation and Prerequisits

\title Getting Started with Enginio using Qt Quick
\brief Introduction to using Enginio using Qt Quick

\section1 Setup a Qt Quick 2 application project

Create a new Qt Quick 2 Application.

You can use Qt Creator to get started with a template.
(File ⇒ New File or Project ⇒ Applications ⇒ Qt Quick 2 Application)

\section1 Initialize Enginio Client

To use Enginio's QML API, you have to import the library.
\code
import Enginio 1.0
\endcode

Then initialize the \l{Enginio}{enginio client}, with \l{Enginio::backendId}{Backend Id} and Backend Secret values and those can be copied from the Dashboard.

Go to Dashboard ⇒ Your Backend home-view ⇒ See ’Keys box’ ⇒ Copy Backend Id and Backend Secret values.

\code
Enginio {
    id: enginio
    backendId: "YOUR_OWN_BACKEND_ID"
    backendSecret: "YOUR_OWN_BACKEND_SECRET"
}
\endcode

\section1 Store your first Object

Next store an Object to Enginio. First create an object in JSON format and fill it with data as you need. Then create operation to store the object and execute the asynchronous operation.

\code
Component.onCompleted: {
    var city = {
        objectType: "objects.city",
        name: "Helsinki",
        population: 606000
    };
    enginio.create(city);
}
\endcode

Now you can \l{Checking stored objects in the Dashboard}{check the Enginio dashboard} for the newly created object.
*/


/*!
\page enginio-cpp
\indexpage Enginio Overview
\nextpage Checking stored objects in the Dashboard
\previouspage Getting Started with Enginio using Qt Quick

\title Getting Started with Enginio using C++
\brief Introduction to using Enginio using C++

\section1 Setup Qt application project

You need to link to Enginio. For QMake based projects simply add
\code
QT += enginio
\endcode
to your \c .pro file.

\section1 Initialize Enginio Client

To use Enginio Qt library in your code, you have to include relevant library headers.
\code
 #include <Enginio/Enginio>
\endcode
Before making any calls to the Enginio API, the \l EnginioClient needs to be instantiated.
The constructor requires the \l{EnginioClient::backendId}{Backend ID} and \l{EnginioClient::backendSecret}{Backend Secret}.
They can be copied from the Dashboard.
Go to the \l{https://dashboard.engin.io/}{Enginio Dashboard} and select a backend.
Copy the Backend Id and Backend Secret values.

\code
QString backendId("YOUR_OWN_BACKEND_ID");
QString backendSecret("YOUR_OWN_BACKEND_SECRET");
EnginioClient *client = new EnginioClient(backendId, backendSecret);
\endcode
For testing purposes it is easiest to hardcode the backend ID and backend secret directly into application code. But this might not be always the best choice and sometimes it might be beneficial to put backend configuration in separate configuration file.
\section1 Store your first Object

Create an object in JSON format and fill in the data:
\code
    QJsonObject city;
    city.insert("objectType", QString("objects.city")); // an object type is required for all objects in Enginio
    city.insert("name", QString("Oslo")); // other properties can be chosen freely
    city.insert("population", 624000);
\endcode

Create the object in the Enginio database by calling \l{EnginioClient::create()}:
\code
    client->create(city);
    connect(client, SIGNAL(finished(EnginioReply*)), this, SLOT(uploadFinished(EnginioReply*)));
\endcode
Note that execute() method performs the actual asynchronous network communication.
You need to wait for its completion by connecting to the \l{EnginioClient::finished()}{finished} and \l{EnginioClient::error()}{error} signals.

Now you can \l{Checking stored objects in the Dashboard}{check the Enginio dashboard} for the newly created object.
*/


/*!
\page enginio-dashboard.html
\title Checking stored objects in the Dashboard
\indexpage Enginio Overview
\previouspage Getting Started with Enginio using C++
\nextpage All Enginio Classes

When you have successfully stored objects with Qt C++ or QML code, go to your \l{https://dashboard.engin.io/}{Enginio Dashboard}
and check the status there.

\list
\li Select the ’Objects’ view from top navigation bar.
\li Make sure that objects.city is selected in the type drop-down.
\li The list should now show a row for the object which was just uploaded.
\endlist
\image object_browser_first_city_object.png

For more information on how to interact with Enginio, read the \l EnginioClient documentation.
To get convenient access to objects stored in Enginio, consider using \l EnginioModel.
*/

/*!
\page tutorials.html
\title Enginio Tutorials
\indexpage Enginio Overview

\list
\li \l {Enginio Installation and Prerequisits}
\li \l {Getting Started with Enginio using Qt Quick}
\li \l {Getting Started with Enginio using C++}
\endlist
*/

/*!
\page classes.html
\title All Enginio Classes
\indexpage Enginio Overview
\startpage Enginio Overview
\previouspage Checking stored objects in the Dashboard
\nextpage Enginio Examples

Enginio provides these \b{C++ classes}:
\generatelist {classesbymodule enginio-qt}
Enginio provides these \b{QML types}:
\annotatedlist engino-qml

\list
\li \l {Enginio Overview}
\li \l {Enginio Examples}
\endlist
*/

/*!
\page enginio-examples.html
\indexpage Enginio Overview
\startpage Enginio Overview
\previouspage All Enginio Classes

\title Enginio Examples
\brief Using Enginio
\inmodule enginio-qt

List of examples:
\annotatedlist enginio-examples
*/
